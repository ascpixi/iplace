<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="noindex, nofollow" />
    <meta name="description" content="Processing frame creation for iplace" />
    <title>&lt;iplace&gt; - Processing Frame</title>
    <style>
      html,
      body {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        font-family: "Consolas", monospace;
        text-align: center;
        gap: 1em;
      }

      .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #333;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      .status {
        margin-top: 1em;
      }
    </style>
  </head>
  <body>
    <div class="spinner" id="spinner"></div>
    <div class="status" id="status">Processing your frame...</div>

    <script>
      let pollInterval: ReturnType<typeof setInterval> | null = null;
      let pollAttempts = 0;
      const maxPollAttempts = 60; // 5 minutes (60 * 5 seconds)
      const startTime = new Date().toISOString(); // Track when we started polling

      async function pollForFrameCompletion() {
        try {
          const response = await fetch(`/api/recent-frames?since=${encodeURIComponent(startTime)}`);

          if (!response.ok) {
            if (response.status === 401) {
              updateStatus("Authentication expired. Please close this window and try again.");
              if (pollInterval) {
                clearInterval(pollInterval);
              }

              return;
            }

            throw new Error(`HTTP ${response.status}`);
          }

          const data = await response.json();

          if (data.frames && data.frames.length > 0) {
            updateStatus("Frame created successfully!");

            if (window.parent && window.parent !== window) {
              window.parent.postMessage(
                {
                  type: "frameCreated",
                  frame: data.frames[0],
                },
                window.location.origin
              );
            }
            else {
              console.error("Cannot send frameCreated to parent window, as it is", window.parent);
            }

            if (pollInterval) {
              clearInterval(pollInterval);
            }

            setTimeout(() => window.close(), 3000);
            return;
          }

          pollAttempts++;

          if (pollAttempts >= maxPollAttempts) {
            updateStatus("Frame processing is taking longer than expected. You may close this window.");
            if (pollInterval) {
              clearInterval(pollInterval);
            } 

            setTimeout(() => {
              window.close();
            }, 5000);
          }
        }
        catch (error) {
          console.error("Failed to poll for frame completion:", error);
          pollAttempts++;

          if (pollAttempts >= maxPollAttempts) {
            updateStatus("Unable to verify frame creation. Please check your frames list.");
            if (pollInterval) {
              clearInterval(pollInterval);
            }

            setTimeout(() => window.close(), 3000);
          }
        }
      }

      function updateStatus(message: string) {
        const statusEl = document.getElementById("status");
        const spinnerEl = document.getElementById("spinner");

        if (statusEl) {
          statusEl.textContent = message;
        }

        if (
          message.includes("successfully") ||
          message.includes("expired") ||
          message.includes("longer than expected") ||
          message.includes("Unable to verify")
        ) {
          if (spinnerEl) {
            spinnerEl.style.display = "none";
          }
        }
      }

      pollInterval = setInterval(pollForFrameCompletion, 5000); // Poll every 5 seconds
      pollForFrameCompletion();

      setTimeout(() => window.close(), 10 * 60 * 1000); // 10 minutes
    </script>
  </body>
</html>
